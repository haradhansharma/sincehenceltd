# Generated by Django 4.2.2 on 2023-11-07 00:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import imagekit.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('shcurrency', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('abandoned', 'Abandoned'), ('processing', 'Processing'), ('projected', 'Projected'), ('shipped', 'Shipped'), ('completed', 'Completed'), ('canceled', 'Canceled')], db_index=True, default='pending', max_length=100)),
                ('gateway_reference', models.TextField(blank=True, null=True)),
                ('gateway_reference2', models.TextField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('tentative_delivery', models.DateTimeField(blank=True, null=True)),
                ('subscription_active', models.BooleanField(default=False)),
                ('subscription_pushed', models.BooleanField(default=False)),
                ('gateway_payment_url', models.TextField(blank=True, null=True)),
                ('last_followup_on', models.DateTimeField(blank=True, null=True)),
                ('total_followup', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_project', to='service.order')),
            ],
        ),
        migrations.CreateModel(
            name='Quotation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Provide a nice title within 150 characters that will be displayed throughout the project's lifetime.", max_length=150, verbose_name='Write a suitable title for your custom requirements')),
                ('explanations', models.TextField(help_text='Write your project description or custom requirements within 1200 characters to help our team provide you with a comprehensive quotation based on your specific needs. Feel free to mention any reference links, specific work requirements, or preferred technology stack. Please ensure that your input is relevant to the referencing service on this page.', max_length=1200, verbose_name='Your specific needs')),
                ('require_by', models.DateTimeField(verbose_name='Quotation required by')),
                ('status', models.CharField(choices=[('open', 'Open'), ('expired', 'Expired'), ('denied', 'Denied'), ('response_sent', 'Response Sent'), ('accepted_by_client', 'Accepted By Client'), ('rejected_by_client', 'Rejected By CLient')], default='open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quotation_creator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=252)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='QuotationData',
            fields=[
                ('quotation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='quotation_data', serialize=False, to='service.quotation')),
                ('quotation_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('header', models.CharField(max_length=20)),
                ('memo', models.TextField(max_length=400)),
                ('footer', models.CharField(max_length=250)),
                ('valid_till', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_title', models.CharField(blank=True, max_length=250, null=True)),
                ('price_title', models.CharField(blank=True, max_length=250, null=True)),
                ('trans_type', models.CharField(blank=True, choices=[('add', 'Add'), ('sub', 'Sub')], db_index=True, max_length=100, null=True)),
                ('trans_for', models.CharField(blank=True, choices=[('service', 'Service'), ('quotation', 'Quotation'), ('return', 'Return'), ('topup', 'Top Up')], db_index=True, max_length=100, null=True)),
                ('payment_status', models.CharField(blank=True, choices=[('authorized', 'Authorized'), ('captured', 'Captured'), ('refunded', 'Refunded'), ('failed', 'Failed')], db_index=True, max_length=100, null=True)),
                ('payment_gateway', models.CharField(blank=True, max_length=20, null=True)),
                ('gateway_reference', models.TextField(blank=True, null=True)),
                ('gateway_invoice', models.TextField(blank=True, max_length=150, null=True)),
                ('amount_subtotal', models.FloatField(default=0)),
                ('amount_total', models.FloatField(default=0)),
                ('autoamtic_tax', models.CharField(blank=True, max_length=150, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_trans', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_trans', to='service.order')),
                ('paymemt_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trans_currency', to='shcurrency.currency')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=252)),
                ('data', models.TextField()),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_meta_data', to='service.service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', imagekit.models.fields.ProcessedImageField(upload_to='product_photo')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_images', to='service.service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField()),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_features', to='service.service')),
            ],
        ),
        migrations.CreateModel(
            name='QuotationToDo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.CharField(help_text='Outline to do it will be added to the order text. ', max_length=252)),
                ('can_edit_by_customer', models.BooleanField(default=False)),
                ('quotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quotation_todo', to='service.quotation')),
            ],
        ),
        migrations.AddField(
            model_name='quotation',
            name='reference_service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quotation_reference', to='service.service'),
        ),
        migrations.CreateModel(
            name='ProjectContributor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributor', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_contributor', to='service.project')),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=252)),
                ('features', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_type', models.CharField(blank=True, choices=[('one_time', 'One Time'), ('recurring', 'Recurring')], db_index=True, max_length=100, null=True)),
                ('interval', models.CharField(blank=True, choices=[('month', 'Month'), ('year', 'Year'), ('week', 'Week'), ('day', 'Day')], db_index=True, help_text='Use as recurring interval for suscription or require time for one time price', max_length=100, null=True)),
                ('interval_count', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='currency_of_price', to='shcurrency.currency')),
                ('quotation', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prices_of_quotation', to='service.quotation')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prices_of_service', to='service.service')),
            ],
        ),
        migrations.CreateModel(
            name='OrderText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.CharField(help_text="Please add your to-do items here if you have already outlined it. If it aligns with our workflow, we will keep it as is; otherwise, we may edit it to meet your project requirements. Each line can contain up to 252 characters here. Click the 'Add More Line' button if you need more lines.", max_length=252)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_req_texts', to='service.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('images', models.ImageField(blank=True, help_text='If you have any reference images for the project, you may include them with your order for consideration. 1 MB limit per file. Please note that it is not recommended, and we cannot guarantee strict adherence to reference images.', null=True, upload_to='private_dir/order_images/')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_req_images', to='service.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, help_text='Please upload your project requirements in detail. We accept PDF files, with a maximum file size of 5 MB per file. If your file is larger, consider splitting it. Uploaded requirements carry significant weight, but if any part is unclear, we will discuss it in our ongoing discussions, and strict adherence may not be possible in such cases', null=True, upload_to='private_dir/order_files/')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_req_files', to='service.order')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='price',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders_price', to='service.price'),
        ),
    ]
